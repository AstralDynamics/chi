{ util: 
   { namespace: { get: [Function], set: [Function], exists: [Function] },
     hooker: 
      { override: [Function],
        preempt: [Function],
        filter: [Function],
        hook: [Function],
        orig: [Function],
        unhook: [Function] },
     async: 
      { noConflict: [Function],
        nextTick: [Function: nextTick],
        forEach: [Function],
        forEachSeries: [Function],
        forEachLimit: [Function],
        map: [Function],
        mapSeries: [Function],
        reduce: [Function],
        inject: [Function],
        foldl: [Function],
        reduceRight: [Function],
        foldr: [Function],
        filter: [Function],
        filterSeries: [Function],
        select: [Function],
        selectSeries: [Function],
        reject: [Function],
        rejectSeries: [Function],
        detect: [Function],
        detectSeries: [Function],
        some: [Function],
        any: [Function],
        every: [Function],
        all: [Function],
        sortBy: [Function],
        auto: [Function],
        waterfall: [Function],
        parallel: [Function],
        series: [Function],
        iterator: [Function],
        apply: [Function],
        concat: [Function],
        concatSeries: [Function],
        whilst: [Function],
        until: [Function],
        queue: [Function],
        log: [Function],
        dir: [Function],
        memoize: [Function],
        unmemoize: [Function] },
     _: 
      { [Function: lodash]
        templateSettings: [Object],
        VERSION: '0.9.2',
        after: [Function: after],
        bind: [Function: bind],
        bindAll: [Function: bindAll],
        chain: [Function: chain],
        clone: [Function: clone],
        compact: [Function: compact],
        compose: [Function: compose],
        contains: [Function: contains],
        countBy: [Function: countBy],
        debounce: [Function: debounce],
        defaults: [Function],
        defer: [Function: defer],
        delay: [Function: delay],
        difference: [Function: difference],
        escape: [Function: escape],
        every: [Function: every],
        extend: [Function],
        filter: [Function: filter],
        find: [Function: find],
        first: [Function: first],
        flatten: [Function: flatten],
        forEach: [Function],
        forIn: [Function],
        forOwn: [Function],
        functions: [Function: functions],
        groupBy: [Function: groupBy],
        has: [Function: has],
        identity: [Function: identity],
        indexOf: [Function: indexOf],
        initial: [Function: initial],
        intersection: [Function: intersection],
        invert: [Function: invert],
        invoke: [Function: invoke],
        isArguments: [Function: isArguments],
        isArray: [Function: isArray],
        isBoolean: [Function: isBoolean],
        isDate: [Function: isDate],
        isElement: [Function: isElement],
        isEmpty: [Function: isEmpty],
        isEqual: [Function: isEqual],
        isFinite: [Function: isFinite],
        isFunction: [Function: isFunction],
        isNaN: [Function: isNaN],
        isNull: [Function: isNull],
        isNumber: [Function: isNumber],
        isObject: [Function: isObject],
        isPlainObject: [Function],
        isRegExp: [Function: isRegExp],
        isString: [Function: isString],
        isUndefined: [Function: isUndefined],
        keys: [Function],
        last: [Function: last],
        lastIndexOf: [Function: lastIndexOf],
        lateBind: [Function: lateBind],
        map: [Function: map],
        max: [Function: max],
        memoize: [Function: memoize],
        merge: [Function: merge],
        min: [Function: min],
        mixin: [Function: mixin],
        noConflict: [Function: noConflict],
        object: [Function: object],
        omit: [Function: omit],
        once: [Function: once],
        pairs: [Function: pairs],
        partial: [Function: partial],
        pick: [Function: pick],
        pluck: [Function: pluck],
        random: [Function: random],
        range: [Function: range],
        reduce: [Function: reduce],
        reduceRight: [Function: reduceRight],
        reject: [Function: reject],
        rest: [Function: rest],
        result: [Function: result],
        shuffle: [Function: shuffle],
        size: [Function: size],
        some: [Function: some],
        sortBy: [Function: sortBy],
        sortedIndex: [Function: sortedIndex],
        tap: [Function: tap],
        template: [Function: template],
        throttle: [Function: throttle],
        times: [Function: times],
        toArray: [Function: toArray],
        unescape: [Function: unescape],
        union: [Function: union],
        uniq: [Function: uniq],
        uniqueId: [Function: uniqueId],
        values: [Function: values],
        where: [Function: where],
        without: [Function: without],
        wrap: [Function: wrap],
        zip: [Function: zip],
        all: [Function: every],
        any: [Function: some],
        collect: [Function: map],
        detect: [Function: find],
        drop: [Function: rest],
        each: [Function],
        foldl: [Function: reduce],
        foldr: [Function: reduceRight],
        head: [Function: first],
        include: [Function: contains],
        inject: [Function: reduce],
        methods: [Function: functions],
        select: [Function: filter],
        tail: [Function: rest],
        take: [Function: first],
        unique: [Function: uniq],
        _iteratorTemplate: [Object],
        _: [Circular],
        str: [Object],
        camelize: [Function],
        capitalize: [Function],
        center: [Function],
        chars: [Function],
        chop: [Function],
        classify: [Function],
        clean: [Function],
        count: [Function],
        dasherize: [Function],
        endsWith: [Function],
        escapeHTML: [Function],
        escapeRegExp: [Function],
        exports: [Function],
        humanize: [Function],
        insert: [Function],
        isBlank: [Function],
        join: [Function],
        lines: [Function],
        ljust: [Function],
        lpad: [Function],
        lrpad: [Function],
        lstrip: [Function],
        ltrim: [Function],
        pad: [Function],
        prune: [Function],
        repeat: [Function],
        rjust: [Function],
        rpad: [Function],
        rstrip: [Function],
        rtrim: [Function],
        slugify: [Function],
        splice: [Function],
        sprintf: [Object],
        startsWith: [Function],
        strLeft: [Function],
        strLeftBack: [Function],
        strRight: [Function],
        strRightBack: [Function],
        strip: [Function],
        stripTags: [Function],
        succ: [Function],
        titleize: [Function],
        toNumber: [Function],
        toSentence: [Function],
        trim: [Function],
        truncate: [Function],
        underscored: [Function],
        unescapeHTML: [Function],
        vsprintf: [Function],
        words: [Function] },
     exit: [Function: exit],
     callbackify: [Function],
     error: [Function],
     linefeed: '\n',
     normalizelf: [Function],
     kindOf: [Function],
     toArray: [Function: toArray],
     repeat: [Function],
     pluralize: [Function],
     recurse: [Function],
     spawn: [Function],
     task: { Task: [Function: Task], create: [Function] } },
  log: 
   { always: [Circular],
     _options: 
      { color: true,
        verbose: false,
        debug: false,
        outStream: [Object],
        grunt: [Circular],
        maxCols: null,
        muted: false },
     _hasLogged: false,
     verbose: 
      { always: [Circular],
        _isVerbose: true,
        or: [Object],
        _format: [Function: bound],
        _markup: [Function: bound],
        _write: [Function: bound],
        _writeln: [Function: bound],
        debug: [Function: bound],
        error: [Function: bound],
        errorlns: [Function: bound],
        fail: [Function: bound],
        header: [Function: bound],
        initColors: [Function: bound],
        ok: [Function: bound],
        oklns: [Function: bound],
        option: [Function: bound],
        subhead: [Function: bound],
        success: [Function: bound],
        table: [Function: bound],
        uncolor: [Function: bound],
        warn: [Function: bound],
        wordlist: [Function: bound],
        wraptext: [Function: bound],
        write: [Function: bound],
        writeflags: [Function: bound],
        writeln: [Function: bound],
        writelns: [Function: bound],
        writetableln: [Function: bound] },
     notverbose: 
      { always: [Circular],
        _isVerbose: false,
        or: [Object],
        _format: [Function: bound],
        _markup: [Function: bound],
        _write: [Function: bound],
        _writeln: [Function: bound],
        debug: [Function: bound],
        error: [Function: bound],
        errorlns: [Function: bound],
        fail: [Function: bound],
        header: [Function: bound],
        initColors: [Function: bound],
        ok: [Function: bound],
        oklns: [Function: bound],
        option: [Function: bound],
        subhead: [Function: bound],
        success: [Function: bound],
        table: [Function: bound],
        uncolor: [Function: bound],
        warn: [Function: bound],
        wordlist: [Function: bound],
        wraptext: [Function: bound],
        write: [Function: bound],
        writeflags: [Function: bound],
        writeln: [Function: bound],
        writelns: [Function: bound],
        writetableln: [Function: bound] },
     _format: [Function: bound],
     _markup: [Function: bound],
     _write: [Function: bound],
     _writeln: [Function: bound],
     debug: [Function: bound],
     error: [Function: bound],
     errorlns: [Function: bound],
     fail: [Function: bound],
     header: [Function: bound],
     initColors: [Function: bound],
     ok: [Function: bound],
     oklns: [Function: bound],
     option: [Function: bound],
     subhead: [Function: bound],
     success: [Function: bound],
     table: [Function: bound],
     uncolor: [Function: bound],
     warn: [Function: bound],
     wordlist: [Function: bound],
     wraptext: [Function: bound],
     write: [Function: bound],
     writeflags: [Function: bound],
     writeln: [Function: bound],
     writelns: [Function: bound],
     writetableln: [Function: bound] },
  template: 
   { date: { [Function] masks: [Object], i18n: [Object] },
     today: [Function],
     addDelimiters: [Function],
     setDelimiters: [Function],
     process: [Function] },
  event: 
   { _events: {},
     newListener: false,
     _conf: { wildcard: true },
     wildcard: true,
     listenerTree: {} },
  fail: 
   { code: 
      { FATAL_ERROR: 1,
        MISSING_GRUNTFILE: 2,
        TASK_FAILURE: 3,
        TEMPLATE_ERROR: 4,
        INVALID_AUTOCOMPLETE: 5,
        WARNING: 6 },
     fatal: [Function],
     errorcount: 0,
     warncount: 0,
     warn: [Function],
     report: [Function] },
  file: 
   { glob: 
      { [Function: glob]
        fnmatch: [Function: deprecated],
        sync: [Function: globSync],
        Glob: [Object] },
     minimatch: 
      { [Function: minimatch]
        Minimatch: [Object],
        cache: [Object],
        GLOBSTAR: {},
        filter: [Function: filter],
        defaults: [Function],
        braceExpand: [Function],
        makeRe: [Function],
        match: [Function] },
     findup: [Function],
     setBase: [Function],
     match: [Function],
     isMatch: [Function],
     expand: [Function],
     expandMapping: [Function],
     mkdir: [Function],
     recurse: [Function: recurse],
     defaultEncoding: 'utf8',
     preserveBOM: false,
     read: [Function],
     readJSON: [Function],
     readYAML: [Function],
     write: [Function],
     copy: [Function],
     delete: [Function],
     exists: [Function],
     isLink: [Function],
     isDir: [Function],
     isFile: [Function],
     isPathAbsolute: [Function],
     arePathsEquivalent: [Function],
     doesPathContain: [Function],
     isPathCwd: [Function],
     isPathInCwd: [Function] },
  option: { [Function] init: [Function], flags: [Function] },
  config: 
   { [Function]
     data: {},
     escape: [Function],
     getPropString: [Function],
     getRaw: [Function],
     get: [Function],
     process: [Function],
     set: [Function],
     merge: [Function],
     init: [Function],
     requires: [Function] },
  task: 
   { registerTask: [Function],
     normalizeMultiTaskFiles: [Function],
     registerMultiTask: [Function],
     registerInitTask: [Function],
     renameTask: [Function],
     runAllTargets: [Function],
     loadTasks: [Function],
     loadNpmTasks: [Function],
     init: [Function] },
  help: 
   { initCol1: [Function],
     initWidths: [Function],
     table: [Function],
     queue: 
      [ 'initOptions',
        'initTasks',
        'initWidths',
        'header',
        'usage',
        'options',
        'optionsFooter',
        'tasks',
        'footer' ],
     display: [Function],
     header: [Function],
     usage: [Function],
     initOptions: [Function],
     options: [Function],
     optionsFooter: [Function],
     initTasks: [Function],
     tasks: [Function],
     footer: [Function] },
  cli: 
   { [Function]
     optlist: 
      { help: [Object],
        base: [Object],
        color: [Object],
        gruntfile: [Object],
        debug: [Object],
        stack: [Object],
        force: [Object],
        tasks: [Object],
        npm: [Object],
        write: [Object],
        verbose: [Object],
        version: [Object],
        completion: [Object] },
     tasks: [ 'dev' ],
     options: { tasks: [], npm: [] } },
  verbose: 
   { always: 
      { always: [Circular],
        _options: [Object],
        _hasLogged: false,
        verbose: [Circular],
        notverbose: [Object],
        _format: [Function: bound],
        _markup: [Function: bound],
        _write: [Function: bound],
        _writeln: [Function: bound],
        debug: [Function: bound],
        error: [Function: bound],
        errorlns: [Function: bound],
        fail: [Function: bound],
        header: [Function: bound],
        initColors: [Function: bound],
        ok: [Function: bound],
        oklns: [Function: bound],
        option: [Function: bound],
        subhead: [Function: bound],
        success: [Function: bound],
        table: [Function: bound],
        uncolor: [Function: bound],
        warn: [Function: bound],
        wordlist: [Function: bound],
        wraptext: [Function: bound],
        write: [Function: bound],
        writeflags: [Function: bound],
        writeln: [Function: bound],
        writelns: [Function: bound],
        writetableln: [Function: bound] },
     _isVerbose: true,
     or: 
      { always: [Object],
        _isVerbose: false,
        or: [Circular],
        _format: [Function: bound],
        _markup: [Function: bound],
        _write: [Function: bound],
        _writeln: [Function: bound],
        debug: [Function: bound],
        error: [Function: bound],
        errorlns: [Function: bound],
        fail: [Function: bound],
        header: [Function: bound],
        initColors: [Function: bound],
        ok: [Function: bound],
        oklns: [Function: bound],
        option: [Function: bound],
        subhead: [Function: bound],
        success: [Function: bound],
        table: [Function: bound],
        uncolor: [Function: bound],
        warn: [Function: bound],
        wordlist: [Function: bound],
        wraptext: [Function: bound],
        write: [Function: bound],
        writeflags: [Function: bound],
        writeln: [Function: bound],
        writelns: [Function: bound],
        writetableln: [Function: bound] },
     _format: [Function: bound],
     _markup: [Function: bound],
     _write: [Function: bound],
     _writeln: [Function: bound],
     debug: [Function: bound],
     error: [Function: bound],
     errorlns: [Function: bound],
     fail: [Function: bound],
     header: [Function: bound],
     initColors: [Function: bound],
     ok: [Function: bound],
     oklns: [Function: bound],
     option: [Function: bound],
     subhead: [Function: bound],
     success: [Function: bound],
     table: [Function: bound],
     uncolor: [Function: bound],
     warn: [Function: bound],
     wordlist: [Function: bound],
     wraptext: [Function: bound],
     write: [Function: bound],
     writeflags: [Function: bound],
     writeln: [Function: bound],
     writelns: [Function: bound],
     writetableln: [Function: bound] },
  package: 
   { name: 'grunt',
     description: 'The JavaScript Task Runner',
     version: '0.4.5',
     author: { name: '"Cowboy" Ben Alman', url: 'http://benalman.com/' },
     homepage: 'http://gruntjs.com/',
     repository: { type: 'git', url: 'git://github.com/gruntjs/grunt.git' },
     bugs: { url: 'http://github.com/gruntjs/grunt/issues' },
     licenses: [ [Object] ],
     main: 'lib/grunt',
     scripts: { test: 'grunt test' },
     engines: { node: '>= 0.8.0' },
     keywords: 
      [ 'task',
        'async',
        'cli',
        'minify',
        'uglify',
        'build',
        'lodash',
        'unit',
        'test',
        'qunit',
        'nodeunit',
        'server',
        'init',
        'scaffold',
        'make',
        'jake',
        'tool' ],
     dependencies: 
      { async: '~0.1.22',
        'coffee-script': '~1.3.3',
        colors: '~0.6.2',
        dateformat: '1.0.2-1.2.3',
        eventemitter2: '~0.4.13',
        'findup-sync': '~0.1.2',
        glob: '~3.1.21',
        hooker: '~0.2.3',
        'iconv-lite': '~0.2.11',
        minimatch: '~0.2.12',
        nopt: '~1.0.10',
        rimraf: '~2.2.8',
        lodash: '~0.9.2',
        'underscore.string': '~2.2.1',
        which: '~1.0.5',
        'js-yaml': '~2.0.5',
        exit: '~0.1.1',
        getobject: '~0.1.0',
        'grunt-legacy-util': '~0.2.0',
        'grunt-legacy-log': '~0.1.0' },
     devDependencies: 
      { temporary: '~0.0.4',
        'grunt-contrib-jshint': '~0.6.4',
        'grunt-contrib-nodeunit': '~0.2.0',
        'grunt-contrib-watch': '~0.5.3',
        difflet: '~0.2.3',
        semver: '2.1.0',
        shelljs: '~0.2.5' },
     readme: '# Grunt: The JavaScript Task Runner\n\n[![Build Status: Linux](https://secure.travis-ci.org/gruntjs/grunt.png?branch=master)](http://travis-ci.org/gruntjs/grunt)\n<a href="https://ci.appveyor.com/project/gruntjs/grunt"><img src="https://ci.appveyor.com/api/projects/status/32r7s2skrgm9ubva/branch/master" alt="Build Status: Windows" height="18" /></a>\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\n\n<img align="right" height="260" src="http://gruntjs.com/img/grunt-logo-no-wordmark.svg">\n\n\n### Documentation\n\nVisit the [gruntjs.com](http://gruntjs.com/) website for all the things.\n\n### Support / Contributing\nBefore you make an issue, please read our [Contributing](http://gruntjs.com/contributing) guide.\n\nYou can find the grunt team in [#grunt on irc.freenode.net](http://webchat.freenode.net/?channels=grunt).\n\n### Release History\nSee the [CHANGELOG](CHANGELOG).\n',
     readmeFilename: 'README.md',
     _id: 'grunt@0.4.5',
     dist: { shasum: '053cb7566c9f576ce2f8093a0e7e39720181407c' },
     _from: 'grunt@^0.4.5',
     _resolved: 'https://registry.npmjs.org/grunt/-/grunt-0.4.5.tgz' },
  version: '0.4.5',
  registerTask: [Function],
  registerMultiTask: [Function],
  registerInitTask: [Function],
  renameTask: [Function],
  loadTasks: [Function],
  loadNpmTasks: [Function],
  initConfig: [Function],
  warn: [Function],
  fatal: [Function],
  tasks: [Function] }
[33mWarning: Task "dev" not found. Use --force to continue.[39m

[31mAborted due to warnings.[39m
